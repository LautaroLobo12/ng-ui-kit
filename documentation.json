{
    "pipes": [],
    "interfaces": [
        {
            "name": "AutoCompleteOption",
            "id": "interface-AutoCompleteOption-4f7b244e456250b85f2bfec6e4255172",
            "file": "projects/bitlogic/src/lib/components/search/search.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';\nimport Fuse from 'fuse.js';\n\nexport interface AutoCompleteOption {\n  id: string,\n  code: string,\n  description: string,\n  type: string,\n  metaData: any\n};\n\n@Component({\n  selector: 'bit-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss']\n})\nexport class SearchComponent implements OnInit {\n  private _fuseOptions: any;\n  private _fuse: Fuse<AutoCompleteOption> = null;\n  private _autoCompleteOptions: AutoCompleteOption[] = [];\n\n  filterSearch: FormControl = new FormControl('');\n  optionsResults = [];\n\n  @Input()\n  label: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input() timeToSearch = 500;\n\n  @Input() minLength = 2;\n\n  @Input() \n  set autoCompleteOptions(autoCompleteOptions: AutoCompleteOption[]){\n    this._autoCompleteOptions = autoCompleteOptions;\n    this._fuse = new Fuse(this._autoCompleteOptions, this._fuseOptions);\n  }\n\n  @Output()\n  search: EventEmitter<string> = new EventEmitter();\n\n  @Output() typing = new EventEmitter<boolean>();\n\n  constructor() {   \n    \n    this._fuseOptions = {\n      includeScore: true,\n      minMatchCharLength: 1,\n      threshold: 0.3,\n      caseSensitive: false,\n      shouldSort: true,\n      tokenize: true,\n      matchAllTokens: true,\n      location: 0,\n      distance: 100,\n      maxPatternLength: 32,\n      keys: ['description', 'code']      \n    };\n\n    // this._fuse = new Fuse(this._autoCompleteOptions, this._fuseOptions);\n  }\n\n  ngOnInit(): void {\n    this.filterSearch.setValidators(Validators.minLength(this.minLength));\n\n    this.filterSearch.valueChanges.pipe(\n      tap(() => this.typing.emit(true)),\n      debounceTime(this.timeToSearch),\n      tap(() => this.typing.emit(false)),\n      distinctUntilChanged())\n      .subscribe(() => {\n       // Constraint: only search when the input is empty or valid\n        if (this.filterSearch.value === '' || this.filterSearch.valid) {\n          this.notitySearch();\n        }\n      });\n\n  }\n\n  notitySearch() {\n    this.search.emit(this.filterSearch.value);\n  }\n\n  onFocus() {\n  }\n\n  onBlur() {\n  }\n\n  displayOption(option) {\n    return option ? `${option.description} ${option.code ? `- ${option.code}` : ''}` : '';\n  }\n\n  OptionsAutoComplete($event) {\n    if (this._fuse !== null ) {\n      const target = $event.target as HTMLInputElement;\n      this.optionsResults = this._fuse.search(target.value).slice(0, 100);  \n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "metaData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MenuOption",
            "id": "interface-MenuOption-dbc851841b0cb4cf4409bb87c8f96369",
            "file": "projects/bitlogic/src/lib/components/menu/menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n/**\n * The Menu Options\n * @interface MenuOption\n */\nexport interface MenuOption {\n  id: string, \n  name: string, \n  icon: string, \n  link: string,\n  linkType?: string\n}\n\n@Component({\n  selector: 'bit-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss']\n})\nexport class MenuComponent {\n\n  /**\n   * Is the menu items\n   * @type Array<MenuOption>\n   * @private\n   */\n  private _options: Array<MenuOption> = [];\n\n  /**\n   * Is the menu items\n   * @requires\n   */\n  @Input()\n  set options(options: MenuOption[]) {\n    \n    this._options = options; \n    const regexp = new RegExp(\"^(http|https)://\", \"i\");\n\n    this._options.map((op) => {\n      \n      if (regexp.test(op.link)) {\n        op.linkType = \"externar\";\n      } else {\n        op.linkType = \"internal\";\n      }\n\n    })\n  }\n  get options() {\n    return this.getOptions();\n  }\n\n  /**\n   * The item showed \n   * @default\n   */\n  @Input()\n  numberItemShowed: number = 0;\n\n  /**\n   * Is the selected option id\n   * @type string \n   */\n  @Input()\n  selectedOptionId: string = null;\n\n  /**\n   * More Option. When the menu has several items, it's replaced for the item moreOption.\n   * @type MenuOption\n   */\n  @Input()\n  moreOption: MenuOption = null;\n\n  /**\n   * Menu click handler\n   */\n  @Output() \n  menuClick: EventEmitter<MenuOption> = new EventEmitter<MenuOption>();\n\n  /**\n   * Constructor\n   */\n  constructor() {}\n\n  /**\n   * Check the item selected\n   * @returns boolean\n   */\n  isOptionSelected(option: MenuOption) : boolean {\n    return this.selectedOptionId === option.id;\n  }\n  \n  getOptions(): MenuOption[] {\n    let optionsToShow: MenuOption[] = this._options.slice();\n\n    if (this.moreOption !== null && this.numberItemShowed > 0 && this.numberItemShowed < this._options.length)\n    { \n      optionsToShow = optionsToShow.slice(0,this.numberItemShowed).concat([this.moreOption]);\n    }\n\n    return optionsToShow;\n  }\n\n\n  /**\n   * Menu click handler\n   * @param MenuOption\n   */\n  onOptionClick(optionSelected: MenuOption) {\n    this.selectedOptionId = optionSelected.id;\n    this.menuClick.emit(optionSelected);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "linkType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>The Menu Options</p>\n",
            "rawdescription": "\n\nThe Menu Options\n",
            "methods": []
        },
        {
            "name": "OtherText",
            "id": "interface-OtherText-eb1f2b54cbc28b617b4c9092f386a50c",
            "file": "projects/bitlogic/src/lib/components/select/select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { MatOption } from '@angular/material/core';\n\nexport interface SelectOption {\n  id: number,\n  viewValue: string,\n  meta?: any\n};\n\nexport interface SelectButtons {\n  selectAll: string,\n  deselectAll: string\n};\n\nexport interface OtherText {\n  text1: string,\n  text2: string\n}\n\n\n@Component({\n  selector: 'bit-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements OnInit {\n\n  selectControl = new FormControl('');\n  allSelected = false;\n\n  @ViewChild('select') select: MatSelect;\n\n  @Input()\n  label: string;\n\n  @Input()\n  options: SelectOption[];\n\n  @Input()\n  isMultiple: boolean;\n\n  @Input()\n  selectButtons: SelectButtons = {selectAll: 'Select All', deselectAll: 'Deselect All'};\n\n  @Input()\n  otherText: OtherText = {text1: 'other', text2: 'others'}\n\n  @Output()\n  selectChange = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.selectControl.valueChanges.subscribe(()=>{\n      this.selectChange.emit(this.selectControl.value)\n    })\n  }\n\n  onSelectionChange($event) {\n\n  }\n\n  selectAll() {\n    this.select.options.forEach((item: MatOption) => { \n      if(!item.disabled) {\n        item.select();\n      }\n    });\n    this.allSelected = true;\n  }\n\n  deselectAll() {\n    this.select.options.forEach((item: MatOption) => item.deselect());\n    this.allSelected = false;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "text1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "text2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SelectButtons",
            "id": "interface-SelectButtons-eb1f2b54cbc28b617b4c9092f386a50c",
            "file": "projects/bitlogic/src/lib/components/select/select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { MatOption } from '@angular/material/core';\n\nexport interface SelectOption {\n  id: number,\n  viewValue: string,\n  meta?: any\n};\n\nexport interface SelectButtons {\n  selectAll: string,\n  deselectAll: string\n};\n\nexport interface OtherText {\n  text1: string,\n  text2: string\n}\n\n\n@Component({\n  selector: 'bit-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements OnInit {\n\n  selectControl = new FormControl('');\n  allSelected = false;\n\n  @ViewChild('select') select: MatSelect;\n\n  @Input()\n  label: string;\n\n  @Input()\n  options: SelectOption[];\n\n  @Input()\n  isMultiple: boolean;\n\n  @Input()\n  selectButtons: SelectButtons = {selectAll: 'Select All', deselectAll: 'Deselect All'};\n\n  @Input()\n  otherText: OtherText = {text1: 'other', text2: 'others'}\n\n  @Output()\n  selectChange = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.selectControl.valueChanges.subscribe(()=>{\n      this.selectChange.emit(this.selectControl.value)\n    })\n  }\n\n  onSelectionChange($event) {\n\n  }\n\n  selectAll() {\n    this.select.options.forEach((item: MatOption) => { \n      if(!item.disabled) {\n        item.select();\n      }\n    });\n    this.allSelected = true;\n  }\n\n  deselectAll() {\n    this.select.options.forEach((item: MatOption) => item.deselect());\n    this.allSelected = false;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "deselectAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selectAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-eb1f2b54cbc28b617b4c9092f386a50c",
            "file": "projects/bitlogic/src/lib/components/select/select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { MatOption } from '@angular/material/core';\n\nexport interface SelectOption {\n  id: number,\n  viewValue: string,\n  meta?: any\n};\n\nexport interface SelectButtons {\n  selectAll: string,\n  deselectAll: string\n};\n\nexport interface OtherText {\n  text1: string,\n  text2: string\n}\n\n\n@Component({\n  selector: 'bit-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements OnInit {\n\n  selectControl = new FormControl('');\n  allSelected = false;\n\n  @ViewChild('select') select: MatSelect;\n\n  @Input()\n  label: string;\n\n  @Input()\n  options: SelectOption[];\n\n  @Input()\n  isMultiple: boolean;\n\n  @Input()\n  selectButtons: SelectButtons = {selectAll: 'Select All', deselectAll: 'Deselect All'};\n\n  @Input()\n  otherText: OtherText = {text1: 'other', text2: 'others'}\n\n  @Output()\n  selectChange = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.selectControl.valueChanges.subscribe(()=>{\n      this.selectChange.emit(this.selectControl.value)\n    })\n  }\n\n  onSelectionChange($event) {\n\n  }\n\n  selectAll() {\n    this.select.options.forEach((item: MatOption) => { \n      if(!item.disabled) {\n        item.select();\n      }\n    });\n    this.allSelected = true;\n  }\n\n  deselectAll() {\n    this.select.options.forEach((item: MatOption) => item.deselect());\n    this.allSelected = false;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "viewValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SliderInfo",
            "id": "interface-SliderInfo-b8c069a5732c52b466c07c030e2cf013",
            "file": "projects/bitlogic/src/lib/components/slider/slider.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, AfterViewInit, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { NguCarousel, NguCarouselConfig, NguCarouselStore} from '@ngu/carousel';\n\n/**\n * The Slider Info\n * @interface SliderInfo\n */\nexport interface SliderInfo {\n  careerLevel: string;\n  modality: string;\n  assigment: string;\n  careerName: string;\n  subjectsApprove: string;\n  credits: string;\n  subjectsLabel: string;\n  creditsLabel:string;\n}\n\n@Component({\n  selector: 'bit-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss']\n\n})\nexport class SliderComponent implements AfterViewInit {\n  /**\n   * Is the Slider info\n   */\n  @Input() slideInfo: SliderInfo[];\n  \n  /**\n   * Slide Move click handler\n   */\n  @Output() slideMove = new EventEmitter();\n  \n  /**\n   * Banner click handler\n   */\n  @Output() slideClick = new EventEmitter();\n  \n  private currentSlide: SliderInfo;\n\n  @ViewChild('myCarousel') myCarousel: NguCarousel<any>;\n  \n  carouselTileConfig: NguCarouselConfig = {\n    grid: {xs: 1, sm: 1, md: 1, lg: 1, all: 0},\n    slide: 1,\n    speed: 600,\n    interval: {timing: 4000},\n    point: {\n      visible: true\n    },\n    load: 2,\n    touch: true,\n    loop: true,\n    custom: 'banner'\n  };  \n\n  constructor() {}\n\n  ngAfterViewInit() {\n    if (this.slideInfo.length !== 0) {\n      this.currentSlide = this.slideInfo[0];\n    }\n    console.log(this.currentSlide);\n  }\n\n  onSlideMove(data: NguCarouselStore) {\n    this.currentSlide = this.slideInfo[data.currentSlide]; \n    this.slideMove.emit(this.currentSlide);\n  }\n\n  onSlideClick() {\n    this.slideClick.emit(this.currentSlide);\n  }\n}\n",
            "properties": [
                {
                    "name": "assigment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "careerLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "careerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "credits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "creditsLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "modality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subjectsApprove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "subjectsLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>The Slider Info</p>\n",
            "rawdescription": "\n\nThe Slider Info\n",
            "methods": []
        },
        {
            "name": "TableHeader",
            "id": "interface-TableHeader-44fa4790d26a6f8a65ac3a5a68522c4e",
            "file": "projects/bitlogic/src/lib/components/table/table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, EventEmitter, Output, ViewChild, AfterViewInit } from '@angular/core';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {MatTableDataSource } from '@angular/material/table';\nimport {MatPaginator} from '@angular/material/paginator';\n\n\nexport interface TableHeader {\n  key: string,\n  text: string,\n  orden?: string\n  hide?: boolean,\n  class?: string\n}\n\n@Component({\n  selector: 'bit-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss']\n})\nexport class TableComponent implements OnInit, AfterViewInit {\n\n  private dataSource: MatTableDataSource<any>;\n  private _headers: TableHeader[];\n  private _enableSelection: boolean;\n  columnsToDisplay: string[];\n  selection = new SelectionModel<any>(true, []);\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  @Input()\n  set headers(headers: TableHeader[]){\n    this._headers = headers;\n    \n    this.columnsToDisplay = [];\n    if (this._enableSelection) {\n      this.columnsToDisplay = ['select'];\n    } else {\n      this.selection.clear();\n    }\n    this.columnsToDisplay = [...this.columnsToDisplay, ...this._headers.map(header => header.key)]\n\n    \n  }\n  get headers() {\n    return this._headers;\n  }\n\n  // dataSource = new MatTableDataSource<PeriodicElement>(ELEMENT_DATA);\n  @Input()\n  set data(data: any) {\n    this.dataSource = new MatTableDataSource<any>(data);\n  }\n  get data() {\n    return this.dataSource;\n  }\n\n  @Input()\n  set enableSelection(enableSelection: boolean) {\n    this._enableSelection = enableSelection;\n    this.columnsToDisplay = [];\n    if (this._enableSelection) {\n      this.columnsToDisplay = ['select'];\n    } else {\n      this.selection.clear();\n    }\n    this.columnsToDisplay = [...this.columnsToDisplay, ...this._headers.map(header => header.key)]\n    \n  }\n\n  @Input()\n  enablePagination: boolean\n\n  @Output()\n  rowClick: EventEmitter<any> = new EventEmitter();\n\n  constructor() { \n\n  }\n\n  ngOnInit(): void {\n    \n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.data.length;\n    return numSelected === numRows;\n  }\n\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.data);\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }  \n\n  onClick(row: any){\n    this.selection.toggle(row);\n    this.rowClick.emit(row);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "orden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3c9340bb1ad444d28af3b8589075d58e",
            "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "\"basic\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\" | \"high\" | \"info\""
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean"
                },
                {
                    "name": "sty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "\"text\" | \"outlined\" | \"raised\" | \"flat\""
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"basic\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\" | \"high\" | \"info\"",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_colorClass",
                    "defaultValue": "COLOR_DEFAULT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"text\" | \"outlined\" | \"raised\" | \"flat\"",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_styleClass",
                    "defaultValue": "STYLE_DEFAULT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_typeClass",
                    "defaultValue": "TYPE_DEFAULT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickButton",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nconst ButtonType = {\n  \"button\": \"btn\",\n  \"fab\": \"fab\",\n  \"link\": \"link\"\n}\n\nconst ButtonColor = {\n  \"basic\": \"main\",\n  \"primary\": \"primary\",\n  \"secondary\": \"secondary\",\n  \"success\": \"success\",\n  \"warning\": \"warning\",\n  \"danger\": \"danger\",\n  \"high\": \"high\",\n  \"info\": \"info\"\n}\n\nconst ButtonStyle = {\n  \"text\": \"btn-text\",\n  \"outlined\": \"btn-outline\",\n  \"raised\": \"btn\",\n  \"flat\": \"flat\"\n}\n\nconst COLOR_DEFAULT = ButtonColor.basic;\nconst STYLE_DEFAULT = ButtonStyle.raised;\nconst TYPE_DEFAULT = ButtonType.button;\n\n@Component({\n  selector: 'bit-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit {\n  \n  private _color: 'basic' | 'primary' | 'secondary' | 'success'  | 'warning' | 'danger' | 'high' | 'info' ;\n  private _disabled: boolean = false;\n  private _type: string;\n  private _style: 'text' | 'outlined' | 'raised' | 'flat';\n  private _colorClass: string = COLOR_DEFAULT; \n  private _styleClass: string = STYLE_DEFAULT;\n  private _typeClass: string = TYPE_DEFAULT;\n\n  @Input()\n  set color(color) {\n    this._color = color;\n    this._colorClass = ButtonColor[color] ||  COLOR_DEFAULT;\n  }\n  get color() {\n    return this._color;\n  }\n\n  @Input()\n  set type(type) {\n    this._type = type;\n    this._typeClass = ButtonType[this._type] || TYPE_DEFAULT;\n  }\n  get type() {\n    return this._type;\n  }\n\n  @Input()\n  set sty(style) {\n    this._style = style;\n    this._styleClass = ButtonStyle[this._style] || STYLE_DEFAULT;\n  }\n  get sty() {\n    return this._style;\n  }\n\n  @Input()\n  set disabled(disabled) {\n    this._disabled = disabled;\n  }\n  get disabled() {\n    return this._disabled;\n  }\n\n\n  @Output()\n  click: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() { \n  }\n\n  ngOnInit(): void {\n  }\n\n  getClass() {\n    const commun = '' //'shadow-none' ;\n    // + (this._type === ButtonStyle.fab ? ' btn-rounded' : '');\n    \n    return `${commun} ${this._typeClass} ${this._styleClass}-${this._colorClass}`;\n  }\n\n  onClickButton($event) {\n    this.click.emit('ev');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/theme';\n\n\n// :host {\n//     button {\n//         font-family: $font-primary;\n//         border-radius: 10rem !important;\n//     }\n    \n// }\n\n\n:host {\n    \n    button {\n        font-family: $font-primary;\n    }\n\n    @mixin btn-shadow($color) {\n        box-shadow: 0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%) !important;\n        border-color: transparent !important;\n        &:active {\n            $color-lighten: lighten($color, 5%);\n            box-shadow: 0 5px 5px -3px rgb(0 0 0 / 20%), 0 8px 10px 1px rgb(0 0 0 / 14%), 0 3px 14px 2px rgb(0 0 0 / 12%) !important;\n            transition: all 0.3s cubic-bezier(.25,.8,.25,1) !important;\n            border-color: transparent !important;\n            background-color: $color-lighten !important;\n        }\n    }\n\n    @mixin btn-type($color-sty, $color, $border-color, $background-color ) {\n        .btn-#{$color-sty}{\n            border: 1px solid $border-color;\n            @include btn-background ($background-color, $color-white);\n            @include btn-shadow($color);    \n        }\n\n        .btn-outline-#{$color-sty}{\n            border: 1px solid $border-color;\n            box-shadow: none !important;\n            @include btn-background ($color-white, $background-color);\n            &:active {\n                background-color: mix($color, white, 20%);\n            }                    \n        }\n\n        .btn-text-#{$color-sty}{\n            border-color: transparent; \n            box-shadow: none;\n            @include btn-background (transparent, $background-color);\n            &:active {\n                background-color: mix($color, white, 20%);\n            }                    \n        }\n    }\n\n         \n    .btn {\n        min-width: fit-content !important;\n        @extend %transition;\n        padding: .5rem 1rem !important;\n        font-size: 13px;\n        border-radius: 10rem !important;\n        \n        &:focus, &:hover {\n            outline: none !important;\n        }\n    }\n\n    .fab {\n        width: 56px;\n        min-width: 56px;\n        height: 56px;\n        padding: 0;\n        border-radius: 50%;\n        @extend %transition;\n\n        i {\n            line-height: 54px;\n        }    \n    }\n\n\n    //size\n\n    // .btn-sm {\n    //     padding: .25rem .5rem !important;\n    //     font-size: 0.75rem;\n    //     line-height: 1.5;\n    //     text-transform: initial;\n    //     box-shadow: $shadow-sm;\n    // }\n\n    // .btn-lg {\n    //     padding: .1rem 1.5rem !important;\n    //     font-size: 1.25rem;\n    // }\n\n    //color\n\n        // &:disabled {\n        //     border-color: $color-black-alt-20; \n        //     @include btn-background ($color-black-alt-20, $color-black-alt-80);\n        //     cursor: initial;\n        //     box-shadow: none !important;\n        // }\n    \n\n    .btn-link {\n        border-color: transparent; \n        @include btn-background (transparent, $color-primary);\n        box-shadow: none;\n        text-transform: initial;\n        &:hover {\n            text-decoration: underline;\n        }\n    }\n\n    .btn-link-default {\n        border-color: transparent; \n        @include btn-background (transparent, $color-black-alt-60);\n        box-shadow: none;\n        text-transform: initial;\n        &:hover {\n            text-decoration: none;\n        }\n    }\n\n    .btn-close {\n        border-color: transparent; \n        padding: 0 !important;\n        box-shadow: none;\n        @include btn-background (transparent, $color-black-alt-60);\n    }\n\n\n    @include btn-type(\"secondary\", $color-secondary, $color-secondary, $color-secondary);\n    @include btn-type(\"info\", $color-info, $color-info, $color-info);\n    @include btn-type(\"high\", $color-highlighted, $color-highlighted, $color-highlighted);\n    @include btn-type(\"main\", $color-black, $color-black-alt-10, $color-black);\n    @include btn-type(\"success\", $color-success, $color-success, $color-success);\n    @include btn-type(\"danger\", $color-danger, $color-danger, $color-danger);\n    @include btn-type(\"warning\", $color-warning, $color-warning, $color-warning);\n    @include btn-type(\"primary\", $color-primary, $color-primary, $color-primary);\n\n}\n\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 83
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "color",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "color",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "type",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "type",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "sty": {
                    "name": "sty",
                    "setSignature": {
                        "name": "sty",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "style",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "style",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sty",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "disabled",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "jsdoctags": [
                            {
                                "name": "disabled",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                }
            },
            "templateData": "\n<!-- <ng-template #content><ng-content></ng-content></ng-template>\n\n<button ngClass={{getClass()}} [disabled]=\"disabled\" (click)=\"onClickButton()\">\n  <ng-container *ngTemplateOutlet=\"content\">\n  </ng-container>\n</button> -->\n\n<button ngClass={{getClass()}} [disabled]=\"disabled\" (click)=\"onClickButton($event)\">\n    <ng-content></ng-content>\n</button>\n\n<!-- <button mat-raised-button  color=\"primary\" [disabled]=\"disabled\" (click)=\"onClickButton($event)\">\n    <ng-content></ng-content>\n</button> -->\n\n\n"
        },
        {
            "name": "ChipsComponent",
            "id": "component-ChipsComponent-3c56866a29b67b3a851b3d2944948bb3",
            "file": "projects/bitlogic/src/lib/components/chips/chips.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-chips",
            "styleUrls": [
                "./chips.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chips.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'bit-chips',\n  templateUrl: './chips.component.html',\n  styleUrls: ['./chips.component.scss']\n})\nexport class ChipsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./chips.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>chips works!</p>"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-dbc851841b0cb4cf4409bb87c8f96369",
            "file": "projects/bitlogic/src/lib/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "moreOption",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1239,
                            "end": 1255,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 333,
                            "tagName": {
                                "pos": 1240,
                                "end": 1244,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 1245,
                                "end": 1255,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 1245,
                                    "end": 1255,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 174,
                                    "typeName": {
                                        "pos": 1245,
                                        "end": 1255,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 78,
                                        "escapedText": "MenuOption"
                                    }
                                }
                            }
                        }
                    ],
                    "rawdescription": "More Option. When the menu has several items, it's replaced for the item moreOption.",
                    "description": "<p>More Option. When the menu has several items, it&#39;s replaced for the item moreOption.</p>\n",
                    "line": 72,
                    "type": "MenuOption"
                },
                {
                    "name": "numberItemShowed",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 970,
                            "end": 982,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 971,
                                "end": 978,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 87,
                                "escapedText": "default"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "The item showed",
                    "description": "<p>The item showed</p>\n",
                    "line": 58,
                    "type": "number"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 550,
                            "end": 563,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 551,
                                "end": 559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "requires"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Is the menu items",
                    "description": "<p>Is the menu items</p>\n",
                    "line": 34,
                    "type": "[]"
                },
                {
                    "name": "selectedOptionId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1071,
                            "end": 1083,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 333,
                            "tagName": {
                                "pos": 1072,
                                "end": 1076,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 1077,
                                "end": 1083,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 1077,
                                    "end": 1083,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 147
                                }
                            }
                        }
                    ],
                    "rawdescription": "Is the selected option id",
                    "description": "<p>Is the selected option id</p>\n",
                    "line": 65,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "menuClick",
                    "defaultValue": "new EventEmitter<MenuOption>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMenu click handler\n",
                    "description": "<p>Menu click handler</p>\n",
                    "line": 78,
                    "type": "EventEmitter<MenuOption>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<MenuOption>",
                    "optional": false,
                    "description": "<p>Is the menu items</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nIs the menu items\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "pos": 427,
                            "end": 456,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 333,
                            "tagName": {
                                "pos": 428,
                                "end": 432,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 433,
                                "end": 450,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 433,
                                    "end": 450,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 174,
                                    "typeName": {
                                        "pos": 433,
                                        "end": 438,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 78,
                                        "escapedText": "Array"
                                    },
                                    "typeArguments": [
                                        {
                                            "pos": 439,
                                            "end": 449,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 174,
                                            "typeName": {
                                                "pos": 439,
                                                "end": 449,
                                                "flags": 4194304,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 0,
                                                "kind": 78,
                                                "escapedText": "MenuOption"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "pos": 456,
                            "end": 468,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 324,
                            "tagName": {
                                "pos": 457,
                                "end": 464,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 120,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "MenuOption[]",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isOptionSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "MenuOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck the item selected\n",
                    "description": "<p>Check the item selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "MenuOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1519,
                                "end": 1526,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean</p>\n"
                        }
                    ]
                },
                {
                    "name": "onOptionClick",
                    "args": [
                        {
                            "name": "optionSelected",
                            "type": "MenuOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMenu click handler\n",
                    "description": "<p>Menu click handler</p>\n",
                    "jsdoctags": [
                        {
                            "name": "optionSelected",
                            "type": "MenuOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n/**\n * The Menu Options\n * @interface MenuOption\n */\nexport interface MenuOption {\n  id: string, \n  name: string, \n  icon: string, \n  link: string,\n  linkType?: string\n}\n\n@Component({\n  selector: 'bit-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss']\n})\nexport class MenuComponent {\n\n  /**\n   * Is the menu items\n   * @type Array<MenuOption>\n   * @private\n   */\n  private _options: Array<MenuOption> = [];\n\n  /**\n   * Is the menu items\n   * @requires\n   */\n  @Input()\n  set options(options: MenuOption[]) {\n    \n    this._options = options; \n    const regexp = new RegExp(\"^(http|https)://\", \"i\");\n\n    this._options.map((op) => {\n      \n      if (regexp.test(op.link)) {\n        op.linkType = \"externar\";\n      } else {\n        op.linkType = \"internal\";\n      }\n\n    })\n  }\n  get options() {\n    return this.getOptions();\n  }\n\n  /**\n   * The item showed \n   * @default\n   */\n  @Input()\n  numberItemShowed: number = 0;\n\n  /**\n   * Is the selected option id\n   * @type string \n   */\n  @Input()\n  selectedOptionId: string = null;\n\n  /**\n   * More Option. When the menu has several items, it's replaced for the item moreOption.\n   * @type MenuOption\n   */\n  @Input()\n  moreOption: MenuOption = null;\n\n  /**\n   * Menu click handler\n   */\n  @Output() \n  menuClick: EventEmitter<MenuOption> = new EventEmitter<MenuOption>();\n\n  /**\n   * Constructor\n   */\n  constructor() {}\n\n  /**\n   * Check the item selected\n   * @returns boolean\n   */\n  isOptionSelected(option: MenuOption) : boolean {\n    return this.selectedOptionId === option.id;\n  }\n  \n  getOptions(): MenuOption[] {\n    let optionsToShow: MenuOption[] = this._options.slice();\n\n    if (this.moreOption !== null && this.numberItemShowed > 0 && this.numberItemShowed < this._options.length)\n    { \n      optionsToShow = optionsToShow.slice(0,this.numberItemShowed).concat([this.moreOption]);\n    }\n\n    return optionsToShow;\n  }\n\n\n  /**\n   * Menu click handler\n   * @param MenuOption\n   */\n  onOptionClick(optionSelected: MenuOption) {\n    this.selectedOptionId = optionSelected.id;\n    this.menuClick.emit(optionSelected);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n@import '../../../../assets/scss/theme';\n\n\n:host {\n  .navbar {\n    height: 100%;\n    background: $color-white;\n    box-shadow: 3px 0 6px rgba(0,0,0,.08);\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n  \n    .u21 {\n      background-image: url('../../../../assets/img/iso_siglo_21.svg');\n      width: 34px;\n      height: 34px;\n      background-size: cover;\n      background-repeat: none;\n      background-position: center;\n      margin: 26px 0 26px 0;\n    }\n  \n    .menu {\n      list-style-type: none;\n      margin: 0;\n      padding: 0;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n  \n      height: 80%;\n  \n      .item {\n        @extend %transition;\n        overflow: hidden;\n    \n        &:hover {\n          opacity: 0.8;\n          cursor: pointer;\n        }\n    \n        i {\n          height: 50px;\n          width: 50px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          border-radius: 50%;\n          border: 6px solid $color-white;\n          background-color: $color-white;\n          align-items: center;\n          justify-content: center;\n          color:$color-black-alt-40;\n          font-size: 26px;\n        }\n        h6 {\n          color:$color-black-alt-40;\n        }\n    \n        &.selected {\n          i {\n              color: $color-white;\n              background-color: $color-primary;\n          }\n          h6 {\n              color: $color-primary;\n          }\n        }\n    \n  \n      }\n  \n    }\n  \n    .version {\n      height: auto;\n    }\n  \n  }\n  \n  @media  only screen and ( max-width : 768px) {\n  \n    .u21 {\n      display: none;  \n    }\n  \n    .navbar {\n  \n      .menu {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-evenly;\n        width: 100%;\n      }\n    }\n  }\n  \n}\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 78,
                "rawdescription": "\n\nConstructor\n"
            },
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "options",
                                "type": "MenuOption[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "rawdescription": "Is the menu items",
                        "description": "<p>Is the menu items</p>\n",
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "MenuOption[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                }
            },
            "templateData": "<nav class=\"navbar\">\n  <div class=\"u21\"></div>\n\n  <ul class=\"menu\">\n    <ng-container *ngFor=\"let option of getOptions()\">\n        <li id={{option.id}} routerLink={{option.link}} class=\"item\" [class.selected]=\"isOptionSelected(option)\" (click)=\"onOptionClick(option)\">\n          <div>\n              <i class=\"material-icons mx-auto\">{{option.icon}}</i>\n              <h6 class=\"text-center\">\n                  {{option.name}}\n              </h6>\n            </div>\n          </li>          \n    </ng-container>    \n  </ul>\n\n  <div class=\"version\"></div> \n</nav>"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-4f7b244e456250b85f2bfec6e4255172",
            "file": "projects/bitlogic/src/lib/components/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-search",
            "styleUrls": [
                "./search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoCompleteOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "[]"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "minLength",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "timeToSearch",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "search",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "typing",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_autoCompleteOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AutoCompleteOption[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_fuse",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Fuse<AutoCompleteOption>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_fuseOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filterSearch",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "optionsResults",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "displayOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notitySearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "OptionsAutoComplete",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';\nimport Fuse from 'fuse.js';\n\nexport interface AutoCompleteOption {\n  id: string,\n  code: string,\n  description: string,\n  type: string,\n  metaData: any\n};\n\n@Component({\n  selector: 'bit-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss']\n})\nexport class SearchComponent implements OnInit {\n  private _fuseOptions: any;\n  private _fuse: Fuse<AutoCompleteOption> = null;\n  private _autoCompleteOptions: AutoCompleteOption[] = [];\n\n  filterSearch: FormControl = new FormControl('');\n  optionsResults = [];\n\n  @Input()\n  label: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input() timeToSearch = 500;\n\n  @Input() minLength = 2;\n\n  @Input() \n  set autoCompleteOptions(autoCompleteOptions: AutoCompleteOption[]){\n    this._autoCompleteOptions = autoCompleteOptions;\n    this._fuse = new Fuse(this._autoCompleteOptions, this._fuseOptions);\n  }\n\n  @Output()\n  search: EventEmitter<string> = new EventEmitter();\n\n  @Output() typing = new EventEmitter<boolean>();\n\n  constructor() {   \n    \n    this._fuseOptions = {\n      includeScore: true,\n      minMatchCharLength: 1,\n      threshold: 0.3,\n      caseSensitive: false,\n      shouldSort: true,\n      tokenize: true,\n      matchAllTokens: true,\n      location: 0,\n      distance: 100,\n      maxPatternLength: 32,\n      keys: ['description', 'code']      \n    };\n\n    // this._fuse = new Fuse(this._autoCompleteOptions, this._fuseOptions);\n  }\n\n  ngOnInit(): void {\n    this.filterSearch.setValidators(Validators.minLength(this.minLength));\n\n    this.filterSearch.valueChanges.pipe(\n      tap(() => this.typing.emit(true)),\n      debounceTime(this.timeToSearch),\n      tap(() => this.typing.emit(false)),\n      distinctUntilChanged())\n      .subscribe(() => {\n       // Constraint: only search when the input is empty or valid\n        if (this.filterSearch.value === '' || this.filterSearch.valid) {\n          this.notitySearch();\n        }\n      });\n\n  }\n\n  notitySearch() {\n    this.search.emit(this.filterSearch.value);\n  }\n\n  onFocus() {\n  }\n\n  onBlur() {\n  }\n\n  displayOption(option) {\n    return option ? `${option.description} ${option.code ? `- ${option.code}` : ''}` : '';\n  }\n\n  OptionsAutoComplete($event) {\n    if (this._fuse !== null ) {\n      const target = $event.target as HTMLInputElement;\n      this.optionsResults = this._fuse.search(target.value).slice(0, 100);  \n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/theme';\n\n:host {\n  input {\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n\n  \n}\n",
                    "styleUrl": "./search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 46
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "autoCompleteOptions": {
                    "name": "autoCompleteOptions",
                    "setSignature": {
                        "name": "autoCompleteOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "autoCompleteOptions",
                                "type": "AutoCompleteOption[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "autoCompleteOptions",
                                "type": "AutoCompleteOption[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<!-- <p>search works!</p> -->\n<mat-form-field appearance=\"outline\">\n  <mat-label>{{ label }}</mat-label>\n  <input matInput \n         type=\"text\"\n         [placeholder]=\"placeholder\"\n         [minLength]=\"minLength\"\n         autocomplete=\"off\"\n         [matAutocomplete]=\"auto\"\n         [formControl]=\"filterSearch\"         \n         (focus)=\"onFocus()\"\n         (blur)=\"onBlur()\"\n         (input)=\"OptionsAutoComplete($event)\">\n  <mat-icon matSuffix>search</mat-icon>\n  <ng-content></ng-content>\n\n  <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayOption\">\n    <mat-option *ngFor=\"let option of optionsResults\" [value]=\"option.item\">\n      {{ option.item.description }} - {{ option.item.code }}\n    </mat-option>\n  </mat-autocomplete>\n \n</mat-form-field>\n  "
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-eb1f2b54cbc28b617b4c9092f386a50c",
            "file": "projects/bitlogic/src/lib/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "SelectOption[]"
                },
                {
                    "name": "otherText",
                    "defaultValue": "{text1: 'other', text2: 'others'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "OtherText"
                },
                {
                    "name": "selectButtons",
                    "defaultValue": "{selectAll: 'Select All', deselectAll: 'Deselect All'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "SelectButtons"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "allSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'select'"
                        }
                    ]
                },
                {
                    "name": "selectControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { MatOption } from '@angular/material/core';\n\nexport interface SelectOption {\n  id: number,\n  viewValue: string,\n  meta?: any\n};\n\nexport interface SelectButtons {\n  selectAll: string,\n  deselectAll: string\n};\n\nexport interface OtherText {\n  text1: string,\n  text2: string\n}\n\n\n@Component({\n  selector: 'bit-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements OnInit {\n\n  selectControl = new FormControl('');\n  allSelected = false;\n\n  @ViewChild('select') select: MatSelect;\n\n  @Input()\n  label: string;\n\n  @Input()\n  options: SelectOption[];\n\n  @Input()\n  isMultiple: boolean;\n\n  @Input()\n  selectButtons: SelectButtons = {selectAll: 'Select All', deselectAll: 'Deselect All'};\n\n  @Input()\n  otherText: OtherText = {text1: 'other', text2: 'others'}\n\n  @Output()\n  selectChange = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.selectControl.valueChanges.subscribe(()=>{\n      this.selectChange.emit(this.selectControl.value)\n    })\n  }\n\n  onSelectionChange($event) {\n\n  }\n\n  selectAll() {\n    this.select.options.forEach((item: MatOption) => { \n      if(!item.disabled) {\n        item.select();\n      }\n    });\n    this.allSelected = true;\n  }\n\n  deselectAll() {\n    this.select.options.forEach((item: MatOption) => item.deselect());\n    this.allSelected = false;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/theme';\n\n.example-additional-selection {\n  opacity: 0.75;\n  font-size: 0.90em;\n}\n\n\n  // mat-option {\n\n  //   .filter-option {\n  //     .mat-pseudo-checkbox {\n  //       display: none !important;\n  //     }\n  //   }\n  \n  // }\n  \n  \n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 51
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"outline\">\n  <mat-label>{{ label }}</mat-label>\n\n  <!-- Multiple -->\n  <mat-select *ngIf=\"isMultiple\" \n              multiple\n              #select\n              (selectionChange)=\"onSelectionChange($event)\"\n              [formControl]=\"selectControl\"\n              disableOptionCentering\n              panelClass=\"select-margin-top\"\n              [(value)]=\"selected\">\n\n              <mat-select-trigger>\n                  {{selected ? selected[0]?.viewValue : ''}}\n                  <span *ngIf=\"selected?.length > 1\" class=\"example-additional-selection\">\n                    (+{{selected.length - 1}} {{selected?.length === 2 ? otherText.text1: otherText.text2}})\n                  </span>\n                </mat-select-trigger>\n\n    <mat-option disabled=\"disabled\" class=\"filter-option\">\n      <bit-button sty=\"text\" color=\"secondary\" (click)=\"selectAll()\">\n       {{selectButtons.selectAll}}\n      </bit-button>\n      <bit-button sty=\"text\" color=\"secondary\" (click)=\"deselectAll()\">\n          {{selectButtons.deselectAll}}\n      </bit-button>\n    </mat-option>\n                          \n    <mat-option *ngFor=\"let option of options\"\n                [value]=\"option\">\n      {{option.viewValue}}\n    </mat-option>\n  </mat-select>\n\n  <!-- Simple -->\n  <mat-select *ngIf=\"!isMultiple\"\n              (selectionChange)=\"onSelectionChange($event)\"\n              [formControl]=\"selectControl\"\n              disableOptionCentering\n              panelClass=\"select-margin-top\">\n\n    <mat-option *ngFor=\"let option of options\"\n                [value]=\"option\">\n      {{option.viewValue}}\n    </mat-option>\n  </mat-select>\n\n</mat-form-field>\n"
        },
        {
            "name": "SliderComponent",
            "id": "component-SliderComponent-b8c069a5732c52b466c07c030e2cf013",
            "file": "projects/bitlogic/src/lib/components/slider/slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slider.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "slideInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is the Slider info",
                    "description": "<p>Is the Slider info</p>\n",
                    "line": 29,
                    "type": "SliderInfo[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "slideClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBanner click handler\n",
                    "description": "<p>Banner click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                },
                {
                    "name": "slideMove",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSlide Move click handler\n",
                    "description": "<p>Slide Move click handler</p>\n",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "carouselTileConfig",
                    "defaultValue": "{\n    grid: {xs: 1, sm: 1, md: 1, lg: 1, all: 0},\n    slide: 1,\n    speed: 600,\n    interval: {timing: 4000},\n    point: {\n      visible: true\n    },\n    load: 2,\n    touch: true,\n    loop: true,\n    custom: 'banner'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NguCarouselConfig",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "currentSlide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SliderInfo",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "myCarousel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NguCarousel<any>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'myCarousel'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSlideClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSlideMove",
                    "args": [
                        {
                            "name": "data",
                            "type": "NguCarouselStore",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "NguCarouselStore",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, AfterViewInit, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { NguCarousel, NguCarouselConfig, NguCarouselStore} from '@ngu/carousel';\n\n/**\n * The Slider Info\n * @interface SliderInfo\n */\nexport interface SliderInfo {\n  careerLevel: string;\n  modality: string;\n  assigment: string;\n  careerName: string;\n  subjectsApprove: string;\n  credits: string;\n  subjectsLabel: string;\n  creditsLabel:string;\n}\n\n@Component({\n  selector: 'bit-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss']\n\n})\nexport class SliderComponent implements AfterViewInit {\n  /**\n   * Is the Slider info\n   */\n  @Input() slideInfo: SliderInfo[];\n  \n  /**\n   * Slide Move click handler\n   */\n  @Output() slideMove = new EventEmitter();\n  \n  /**\n   * Banner click handler\n   */\n  @Output() slideClick = new EventEmitter();\n  \n  private currentSlide: SliderInfo;\n\n  @ViewChild('myCarousel') myCarousel: NguCarousel<any>;\n  \n  carouselTileConfig: NguCarouselConfig = {\n    grid: {xs: 1, sm: 1, md: 1, lg: 1, all: 0},\n    slide: 1,\n    speed: 600,\n    interval: {timing: 4000},\n    point: {\n      visible: true\n    },\n    load: 2,\n    touch: true,\n    loop: true,\n    custom: 'banner'\n  };  \n\n  constructor() {}\n\n  ngAfterViewInit() {\n    if (this.slideInfo.length !== 0) {\n      this.currentSlide = this.slideInfo[0];\n    }\n    console.log(this.currentSlide);\n  }\n\n  onSlideMove(data: NguCarouselStore) {\n    this.currentSlide = this.slideInfo[data.currentSlide]; \n    this.slideMove.emit(this.currentSlide);\n  }\n\n  onSlideClick() {\n    this.slideClick.emit(this.currentSlide);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/theme';\n\n.cont-cards {\n\n\tposition: relative;\n\tdisplay: block;\n\twidth: 100%;\n\theight: 15rem;\n\tbackground-color: $color-black-alt-10;\n\tborder-radius: 0.6rem;\n\n\n\t.card {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\theight: 15rem;\n\t\tbox-sizing: border-box;\n\t\tbackground: $color-primary-alt-80;\n\t\tbackground-image: url(\"../../../../assets/img/wave_back.svg\");\n\t\tbackground-size: cover;\n\t\tbackground-position: center bottom;\n\t\tbackground-repeat: no-repeat;\n\t\tcursor: pointer;\n\t\ttransition: all 0.5s;\n\t\tdisplay: block;\n\t\tz-index: 2;\n\t\t&:hover {\n\t\t\tbox-shadow: 0 2px 16px $color-black-alt-10;\n\t\t}\n\n\t\t.course-name {\n\t\t\ttext-shadow: 0 2px 2px $color-primary-alt-80;\t\n\t\t}\n\t\n\t\t.total-subjets {\n\t\t\theight: 2rem;\n\t\t\tbottom: 0 !important;\n\t\t\tbackground-color:$color-primary-alt-80;\n\t\t\tbox-sizing: border-box;\n\t\t}\n\t\t.total-credits {\n\t\t\theight: 2rem;\n\t\t\tbottom: 0 !important;\n\t\t\tbackground-color: $color-secondary-alt-20;\n\t\t\tbox-sizing: border-box;\n\t\t\tcolor: $color-primary-alt-80 !important;\n\t\t}\n\t\n\t\t.empty-state {\n\t\t\tbackground-color: $color-black-alt-20;\n\t\t\tbackground-image: url(\"../../../../assets/img/wave_back.svg\");\n\t\t\tbackground-size: cover;\n\t\t\tbackground-position: center bottom;\n\t\t}\n\t\n\t}\n\n\t.card-button {\n\t\tborder: none;\n\t\tposition: absolute;\n\t\ttop: calc(50% - 13px);\n\t\theight: 26px;\n\t\tbackground: transparent;\n\t\tcolor: $color-white;\n\t\ttext-align: center;\n\t\tcursor: pointer;\n\t\tz-index: 99;\n\t\tdisplay: block;\n\t\tbox-sizing: initial;\n\t\tpadding: 0 0.2rem 2rem 0.2rem;\n\t\ti {\n\t\t\tfont-size: 24px;\n\t\t}\n\n\t\t&.next {\n\t\t\tright: 0;\n\t\t}\n\t\t&.prev {\n\t\t\tleft: 0;\n\t\t}\n\n\t}\n\n\t.rounded-custom {\n    border-radius: 0.25rem;\n\t}\n\n}\n",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 57
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<ngu-carousel #myCarousel class=\"rounded-custom-lg overflow-hidden shadow cont-cards h-100\" \n              [inputs]=\"carouselTileConfig\" \n              [dataSource]=\"slideInfo\" \n              (onMove)=\"onSlideMove($event)\">\n\n    <div class=\"card rounded-0 shadow-0 border-0 d-flex w-100 h-100 item px-2\" \n              *nguCarouselDef=\"let item; let i = index;\">\n\n            <div class=\"flex-grow-1 d-flex flex-column p-4\" (click)=\"onSlideClick()\">\n                        <div class=\"flex-grow-1 w-50 plans\">\n                            <div class=\"mb-2 d-flex align-items-center text-white\">\n                                <i class=\"material-icons icon-xs mr-2\">list_alt</i>\n                                <h6 class=\"m-0\">\n                                    {{item.careerLevel}}\n                                </h6>\n                            </div>\n                            <div class=\"mb-2 d-flex align-items-center text-white\">\n                                <i class=\"material-icons icon-xs mr-2\">work_outline</i>\n                                <h6 class=\"flex-grow-1 pr-2 m-0\">\n                                    {{item.modality}}\n                                </h6>\n                            </div>\n                            <div class=\"mb-1 d-flex align-items-center text-white\">\n                                <i class=\"material-icons icon-xs mr-2\">assignment</i>\n                                <h6 class=\"m-0\">\n                                    {{item.assigment}}\n                                </h6>\n                            </div>\n                        </div>\n                        <div class=\"flex-grow-1 d-flex align-items-center mt-4\">\n                            <h5 class=\"text-white font-weight-bold course-name m-0\">{{item.careerName}}</h5>\n                        </div>\n                        <div *ngIf=\"item.subjectsApprove\">\n                            <div class=\"total-subjets mt-4 rounded-custom\">\n                                <div class=\"h-100 d-flex align-items-center text-white px-3\">\n                                    <h6 class=\"acl flex-grow-1 pr-2 m-0\">{{item.subjectsLabel}}</h6>\n                                    <h5 class=\"num pl-2 m-0\">{{item.subjectsApprove}}</h5>\n                                </div>\n                            </div>\n                        </div>\n                        <div *ngIf=\"item.credits\">\n                            <div class=\"total-credits mt-2 rounded-custom\">\n                                <div class=\"h-100 d-flex align-items-center px-3\">\n                                    <h6 class=\"acl flex-grow-1 pr-2 m-0\">{{item.creditsLabel}}</h6>\n                                    <h5 class=\"num pl-2 m-0\"> {{item.credits}}</h5>\n                                </div>\n                            </div>\n                        </div>\n                </div>\n                \n            </div>\n    \n    <button NguCarouselPrev class=\"card-button prev\">\n        <i class=\"material-icons\">chevron_left</i>\n    </button>\n    <button NguCarouselNext class=\"card-button next\">\n        <i class=\"material-icons\">chevron_right</i>\n    </button>\n\n</ngu-carousel>\n"
        },
        {
            "name": "StatusComponent",
            "id": "component-StatusComponent-8e91df0364590d355e4711ca49c6b27d",
            "file": "projects/bitlogic/src/lib/components/status/status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-status",
            "styleUrls": [
                "./status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "SizeEnum.NORMAL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "SizeEnum"
                },
                {
                    "name": "status",
                    "defaultValue": "StatusEnum.ACCEPTED",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "StatusEnum"
                },
                {
                    "name": "statusHead",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\nenum StatusEnum {\n  PENEDING = 'pending',\n  ACCEPTED = 'accepted',\n  ERROR = 'error',\n  CANCELED = 'canceled'\n};\n\nenum SizeEnum {\n  SMALL = 'small',\n  NORMAL = 'normal'\n}\n\n@Component({\n  selector: 'bit-status',\n  templateUrl: './status.component.html',\n  styleUrls: ['./status.component.scss']\n})\nexport class StatusComponent implements OnInit {\n\n  @Input()\n  status: StatusEnum = StatusEnum.ACCEPTED;\n \n  @Input()\n  size: SizeEnum = SizeEnum.NORMAL;\n\n  @Input()\n  statusHead: boolean = true;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/theme';\n\n\n// status colors\n$status-color-pending: $color-warning;\n$status-color-accepted: $color-success;\n$status-color-error: $color-danger;\n$status-color-canceled: $color-black-alt-60;\n\n:host {\n\n  font-family: $font-primary;\n\n  .status {\n    display: inline-flex;\n    flex-direction: row;    \n    border: none;\n    cursor: default;\n    height: 36px;\n    outline: none;\n    padding: 0;\n    font-size: 14px;\n    white-space: nowrap;\n    align-items: center;\n    border-radius: 16px;\n    vertical-align: middle;\n    text-decoration: none;\n    justify-content: center;\n\n    &.small {\n      transform: scale(0.75);\n    }\n    \n\n    &.pending {\n      background-color: mix($status-color-pending, white, 5%);\n    }\n\n    &.accepted {\n      background-color: mix($status-color-accepted, white, 5%);\n    }\n\n    &.error {\n      background-color: mix($status-color-error, white, 5%);\n    }\n\n    &.canceled {\n      background-color: mix($status-color-canceled, white, 5%);\n    }\n\n\n    .status-head {\n      display: flex;\n      overflow: hidden;\n      flex-shrink: 0;\n      align-items: center;\n      user-select: none;\n      border-radius: 50%;\n      justify-content: center;\n      width: 1rem;\n      height: 1rem;\n      color: #fff;\n      margin-left: 10px;\n\n      &.pending {\n        background-color: $status-color-pending;\n      }\n\n      &.accepted {\n        background-color: $status-color-accepted;\n      }\n\n      &.error {\n        background-color: $status-color-error;\n      }\n\n      &.canceled {\n        background-color: $status-color-canceled;\n      }\n      \n    }\n\n    .status-content {\n      display: flex;\n      align-items: center;\n      padding: 7px 10px;\n      font-weight: 500;\n\n      &.pending {\n        color: $status-color-pending;\n      }\n\n      &.accepted {\n        color: $status-color-accepted;\n      }\n\n      &.error {\n        color: $status-color-error;\n      }\n\n      &.canceled {\n        color: $status-color-canceled;\n      }\n\n      \n    }\n    \n  }\n  \n}\n",
                    "styleUrl": "./status.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"status\" ngClass=\"{{status}} {{size}}\">\n    <div *ngIf=\"statusHead === true\" class=\"status-head\" [ngClass]=\"status\"></div>\n    <div class=\"status-content\" [ngClass]=\"status\">\n        <ng-content></ng-content>\n    </div>\n</div>\n\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-44fa4790d26a6f8a65ac3a5a68522c4e",
            "file": "projects/bitlogic/src/lib/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "any"
                },
                {
                    "name": "enablePagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean"
                },
                {
                    "name": "enableSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean"
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "rowClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_enableSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableHeader[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "columnsToDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                },
                {
                    "name": "selection",
                    "defaultValue": "new SelectionModel<any>(true, [])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "checkboxLabel",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe label for the checkbox on the passed row",
                    "description": "<p>The label for the checkbox on the passed row</p>\n",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAllSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "masterToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, EventEmitter, Output, ViewChild, AfterViewInit } from '@angular/core';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {MatTableDataSource } from '@angular/material/table';\nimport {MatPaginator} from '@angular/material/paginator';\n\n\nexport interface TableHeader {\n  key: string,\n  text: string,\n  orden?: string\n  hide?: boolean,\n  class?: string\n}\n\n@Component({\n  selector: 'bit-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss']\n})\nexport class TableComponent implements OnInit, AfterViewInit {\n\n  private dataSource: MatTableDataSource<any>;\n  private _headers: TableHeader[];\n  private _enableSelection: boolean;\n  columnsToDisplay: string[];\n  selection = new SelectionModel<any>(true, []);\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  @Input()\n  set headers(headers: TableHeader[]){\n    this._headers = headers;\n    \n    this.columnsToDisplay = [];\n    if (this._enableSelection) {\n      this.columnsToDisplay = ['select'];\n    } else {\n      this.selection.clear();\n    }\n    this.columnsToDisplay = [...this.columnsToDisplay, ...this._headers.map(header => header.key)]\n\n    \n  }\n  get headers() {\n    return this._headers;\n  }\n\n  // dataSource = new MatTableDataSource<PeriodicElement>(ELEMENT_DATA);\n  @Input()\n  set data(data: any) {\n    this.dataSource = new MatTableDataSource<any>(data);\n  }\n  get data() {\n    return this.dataSource;\n  }\n\n  @Input()\n  set enableSelection(enableSelection: boolean) {\n    this._enableSelection = enableSelection;\n    this.columnsToDisplay = [];\n    if (this._enableSelection) {\n      this.columnsToDisplay = ['select'];\n    } else {\n      this.selection.clear();\n    }\n    this.columnsToDisplay = [...this.columnsToDisplay, ...this._headers.map(header => header.key)]\n    \n  }\n\n  @Input()\n  enablePagination: boolean\n\n  @Output()\n  rowClick: EventEmitter<any> = new EventEmitter();\n\n  constructor() { \n\n  }\n\n  ngOnInit(): void {\n    \n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.data.length;\n    return numSelected === numRows;\n  }\n\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.data);\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }  \n\n  onClick(row: any){\n    this.selection.toggle(row);\n    this.rowClick.emit(row);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/theme';\n\n:host {\n\n  .mat-table {\n    width: 100%;\n    font-family: $font-primary;\n    \n    // header\n    .mat-header-row {\n      background-color: $color-primary;\n\n      .mat-header-cell {\n        color: $color-white;\n      }    \n    }\n\n    // body\n    .mat-row:hover {\n      background-color: $color-primary-alt-10;\n    }\n\n  }\n\n  // checkbox\n  ::ng-deep .mat-checkbox-ripple .mat-ripple-element {\n    background-color: $color-primary !important;\n  }\n  \n  ::ng-deep .mat-checkbox-checked.mat-accent .mat-checkbox-background {\n    background-color: $color-primary !important;\n  }\n  \n  ::ng-deep .mat-checkbox-indeterminate.mat-accent .mat-checkbox-background {\n    background-color: $color-primary !important;\n  }\n  \n  \n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 74
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "headers": {
                    "name": "headers",
                    "setSignature": {
                        "name": "headers",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "headers",
                                "type": "TableHeader[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "headers",
                                "type": "TableHeader[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "headers",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                },
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                },
                "enableSelection": {
                    "name": "enableSelection",
                    "setSignature": {
                        "name": "enableSelection",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "enableSelection",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "enableSelection",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "\n<div class=\"mat-elevation-z8\">\n\n    <table mat-table [dataSource]=\"data\" >\n        <ng-container matColumnDef=\"select\">\n          <th mat-header-cell *matHeaderCellDef>\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                          [checked]=\"selection.hasValue() && isAllSelected()\"\n                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                          [aria-label]=\"checkboxLabel()\">\n            </mat-checkbox>\n          </th>\n          <td mat-cell *matCellDef=\"let row\">\n            <mat-checkbox (click)=\"$event.stopPropagation()\"\n                          (change)=\"$event ? selection.toggle(row) : null\"\n                          [checked]=\"selection.isSelected(row)\"\n                          [aria-label]=\"checkboxLabel(row)\">\n            </mat-checkbox>\n          </td>\n        </ng-container>\n          \n        <ng-container [matColumnDef]=\"column.key\" *ngFor=\"let column of headers\">\n          \n          <th mat-header-cell *matHeaderCellDef> {{column.text}} </th>\n          <td mat-cell *matCellDef=\"let element\"> {{element[column.key]}} </td>\n        </ng-container>\n      \n        <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\" (click)=\"onClick(row)\"></tr>\n      </table>\n      \n      <mat-paginator *ngIf=\"enablePagination\" [pageSizeOptions]=\"[5, 10, 20]\"\n        showFirstLastButtons>\n      </mat-paginator>\n      \n</div>\n"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-64d0eaccdc9f23d028a6e7f16a0f5f69",
            "file": "projects/bitlogic/src/lib/components/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-toolbar",
            "styleUrls": [
                "./toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is the current date",
                    "description": "<p>Is the current date</p>\n",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "title",
                    "defaultValue": "'Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 279,
                            "end": 292,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 280,
                                "end": 288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Is the title for the toolbar",
                    "description": "<p>Is the title for the toolbar</p>\n",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is the current user",
                    "description": "<p>Is the current user</p>\n",
                    "line": 34,
                    "type": "string"
                },
                {
                    "name": "version",
                    "defaultValue": "'v0.0.0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is the version to application",
                    "description": "<p>Is the version to application</p>\n",
                    "line": 21,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "openProfile",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProfile Click handler\n",
                    "description": "<p>Profile Click handler</p>\n",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onOpenProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'bit-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss']\n})\nexport class ToolbarComponent {\n\n  /**\n   * Is the title for the toolbar\n   * @required\n   */ \n  @Input()\n  title: string = 'Title';\n\n  /**\n   * Is the version to application\n   */\n  @Input()\n  version: string = 'v0.0.0';\n\n\n  /**\n   * Is the current date\n   */\n  @Input()\n  currentDate: string;\n\n  /**\n   * Is the current user\n   */\n  @Input()\n  userName: string;\n\n  /**\n   * Profile Click handler\n   */\n  @Output()\n  openProfile = new EventEmitter();\n\n  constructor() { }\n\n  onOpenProfile() {\n    this.openProfile.emit(this.userName); // TODO send user data.\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "  @import '../../../../assets/scss/theme';\n \n  :host {\n\n    // custom variables\n    --color: #{$color-white}; // title color\n    --background-lg-start: #{$color-secondary}; // linear-gradient start\n    --background-lg-end: #{$color-primary}; // linear-gradient end\n\n    .spacer {\n      flex: 1;\n    }\n  \n    .toolbar {\n  \n      height: 80px;\n      display: flex;\n      align-items: center;\n  \n      @include deg-main (-45deg, var(--background-lg-start), var(--background-lg-end));\n      \n      color: var(--color);\n      width: 100%;\n  \n      .header-user-data {\n        display: flex;\n        flex-direction: column;\n        margin: 0 20px;\n  \n        h1 {\n          margin: 0 0 5px 0;\n          font-weight: bold ;\n          font-size: 24px;\n        }\n  \n        p {\n          margin: 0;\n          font-size: 0.7rem;\n        }\n      }\n  \n      .header-profile {\n        display: flex;\n        align-items: center;\n        margin: 0 20px 0 0;\n  \n        .user-data {\n          margin: 0 10px 0 0;\n          text-align: end;\n  \n          h4 {\n            margin: 0 0 5px 0;\n          }\n  \n          p {\n            font-size: .7rem;\n            margin: 0 0 5px 0;\n          }\n        }\n  \n        .user-avatar {\n          width: 40px;\n          height: 40px;\n          border-radius: 50%;\n          border: 2px solid $color-primary;\n          overflow: hidden;\n          background-size: cover;\n          background-repeat: none;\n          background-position: center;\n          background-image: url(../../../../assets/img/user_avatar_default.png);\n          cursor: pointer;\n        }\n  \n        .version {\n          margin-right: 0;\n          font-weight: 300;\n          font-size: 12px;\n        }\n          \n      }\n  \n    \n    }    \n  }\n  \n\n",
                    "styleUrl": "./toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "templateData": "<div class=\"toolbar\">\n    <div class=\"header-user-data\">\n        <h2>{{title}}</h2>\n    </div>\n\n    <div class=\"spacer\"></div>\n\n    <div class=\"header-profile\">\n\n        <div class=\"user-data\">\n            <h4>{{userName}}</h4>\n            <p>{{currentDate | date:'mediumDate'}}</p>\n            <p class=\"version\">({{version}})</p>\n        </div>\n        <div class=\"user-avatar\" (click)=\"onOpenProfile()\"></div>\n    </div>\n\n\n</div>"
        }
    ],
    "modules": [
        {
            "name": "BitlogicModule",
            "id": "module-BitlogicModule-262186c925b6c7c06b73adbd108df4e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/bitlogic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ToolbarModule } from './components/toolbar/toolbar.module';\nimport { ButtonModule } from './components/button/button.module';\nimport { MenuModule } from './components/menu/menu.module';\nimport { SliderModule } from './components/slider/slider.module';\nimport { SearchModule } from './components/search/search.module';\nimport { SelectModule } from './components/select/select.module';\nimport { TableModule } from './components/table/table.module';\nimport { ChipsModule } from './components/chips/chips.module';\nimport { StatusModule } from './components/status/status.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: [\n    ToolbarModule,\n    ButtonModule,\n    MenuModule,\n    SliderModule,\n    SearchModule,\n    SelectModule,\n    TableModule,\n    ChipsModule,\n    StatusModule\n  ]\n})\nexport class BitlogicModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "ChipsModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SliderModule"
                        },
                        {
                            "name": "StatusModule"
                        },
                        {
                            "name": "TableModule"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-b6484984ea469abf848a4abc8da486a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { ButtonComponent } from './button.component';\n\n@NgModule({\n  declarations: [ButtonComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n  ],\n  exports: [\n    ButtonComponent\n  ]\n})\nexport class ButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChipsModule",
            "id": "module-ChipsModule-8ff90a67fcdb2c61a8eeb9dfe76ab8c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/chips/chips.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { ChipsComponent } from './chips.component';\n\n@NgModule({\n  declarations: [ChipsComponent],\n  imports: [\n    CommonModule,\n    MatChipsModule\n  ],\n  exports: [\n    ChipsComponent\n  ]\n})\nexport class ChipsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChipsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChipsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "id": "module-MenuModule-dce051b9346e181e52e991b2a3220ded",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MenuComponent } from './menu.component';\n\n@NgModule({\n  declarations: [MenuComponent],\n  imports: [\n    CommonModule,\n  ],\n  exports: [MenuComponent]\n})\nexport class MenuModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchModule",
            "id": "module-SearchModule-9bd72be4aeb0d0bf052dfc774d311ef9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/search/search.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SearchComponent } from './search.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule} from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\n@NgModule({\n  declarations: [SearchComponent],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatInputModule,    \n    MatIconModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule\n  ],\n  exports: [\n    SearchComponent\n  ]\n})\nexport class SearchModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-510d6e0e43c1d74d7f41c1b9a469d387",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SelectComponent } from './select.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ButtonModule } from '../button/button.module';\n\n@NgModule({\n  declarations: [SelectComponent],\n  imports: [\n    CommonModule,\n    MatSelectModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    \n  ],\n  exports: [\n    SelectComponent,\n  ]\n})\nexport class SelectModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SliderModule",
            "id": "module-SliderModule-295dcfe3aac8b2da51432c0f80eae092",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/slider/slider.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SliderComponent } from './slider.component';\nimport { NguCarouselModule } from '@ngu/carousel';\n\n@NgModule({\n  declarations: [SliderComponent],\n  imports: [\n    CommonModule,\n    NguCarouselModule\n  ],\n  exports: [\n    SliderComponent\n  ],\n})\nexport class SliderModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SliderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SliderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatusModule",
            "id": "module-StatusModule-96827c1e213c04af7170c251a2fbf0e2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/status/status.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StatusComponent } from './status.component';\n\n\n\n@NgModule({\n  declarations: [StatusComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    StatusComponent\n  ]\n})\nexport class StatusModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StatusComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StatusComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-d013a9a71bc4e871d9b47676a243e0bf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from \"@angular/material/table\";\nimport { TableComponent } from './table.component';\nimport { MatCheckboxModule } from '@angular/material/checkbox'; \nimport { MatPaginatorModule } from '@angular/material/paginator';\n\n@NgModule({\n  declarations: [TableComponent],\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatPaginatorModule\n  ],\n  exports: [\n    TableComponent\n  ]\n})\nexport class TableModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToolbarModule",
            "id": "module-ToolbarModule-8844cbe8d01b824c0619e0100bd89ee1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/bitlogic/src/lib/components/toolbar/toolbar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToolbarComponent } from './toolbar.component';\n\n@NgModule({\n  declarations: [ToolbarComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [ToolbarComponent]\n})\nexport class ToolbarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ButtonColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  \"basic\": \"main\",\n  \"primary\": \"primary\",\n  \"secondary\": \"secondary\",\n  \"success\": \"success\",\n  \"warning\": \"warning\",\n  \"danger\": \"danger\",\n  \"high\": \"high\",\n  \"info\": \"info\"\n}"
            },
            {
                "name": "ButtonStyle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  \"text\": \"btn-text\",\n  \"outlined\": \"btn-outline\",\n  \"raised\": \"btn\",\n  \"flat\": \"flat\"\n}"
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  \"button\": \"btn\",\n  \"fab\": \"fab\",\n  \"link\": \"link\"\n}"
            },
            {
                "name": "COLOR_DEFAULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonColor.basic"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/search/search.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/toolbar/toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LegajoDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LegajoSlider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "moreOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ id: '_mas', name: 'Más', icon: 'more_vert', link:\"\" }"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MenuOption[]",
                "defaultValue": "[\n  { id: 'butt-1', name: 'Exámenes', icon: 'insert_drive_file', link:\"\" },\n  { id: 'butt-2', name: 'Materias', icon: 'menu_book', link:\"\" },\n  { id: 'butt-3', name: 'Pagos', icon: 'receipt', link:\"\" },\n  { id: 'butt-4', name: 'Titulos', icon: 'done', link:\"\"  },\n  { id: 'butt-5', name: 'info', icon: 'info', link:\"\" },\n]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Simple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "slideInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SliderInfo[]",
                "defaultValue": "[\n  {\n    careerLevel: 'GRADO',\n    modality: 'DISTANCIA - EDUCACION DISTRIBUIDA',\n    assigment: 'VCIN02466',\n    careerName: 'LICENCIATURA EN COMERCIO INTERNACIONAL',\n    subjectsApprove: '35/37',\n    credits: '3/12',\n    subjectsLabel:'Materias programáticas aprobadas para el plan de estudio',\n    creditsLabel:'Créditos acumulados'\n\n  },\n  {\n    careerLevel: 'GRADO 1',\n    modality: 'DISTANCIA - EDUCACION DISTRIBUIDA',\n    assigment: 'VCIN03000',\n    careerName: 'Licenciatura en Gestión Turística',\n    subjectsApprove: '1/10',\n    credits: '3/3',\n    subjectsLabel:'Materias programáticas aprobadas para el plan de estudio',\n    creditsLabel:'Créditos acumulados'\n  },\n  {\n    careerLevel: 'GRADO 2',\n    modality: 'DISTANCIA - EDUCACION DISTRIBUIDA',\n    assigment: 'VCIN04000',\n    careerName: 'Mat 3',\n    subjectsApprove: '1/10',\n    credits: '3/3',\n    subjectsLabel:'Materias programáticas aprobadas para el plan de estudio',\n    creditsLabel:'Créditos acumulados'\n  },\n  {\n    careerLevel: 'GRADO 3',\n    modality: 'DISTANCIA - EDUCACION DISTRIBUIDA',\n    assigment: 'VCIN04000',\n    careerName: 'Mat 3',\n    subjectsApprove: '1/10',\n    credits: '3/3',\n    subjectsLabel:'Materias programáticas aprobadas para el plan de estudio',\n    creditsLabel:'Créditos acumulados'\n  }\n]"
            },
            {
                "name": "STYLE_DEFAULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStyle.raised"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n\n  template: \n//   `<button mat-raised-button color=\"primary\" >\n//   hola\n// </button>`\n\n  `<bit-button sty=\"text\" color=\"secondary\">Text - secondary</bit-button>\n  <bit-button sty=\"raised\" color=\"secondary\">raised - secondary</bit-button>\n  <bit-button sty=\"outlined\" color=\"secondary\">outlined - secondary</bit-button>\n  <bit-button sty=\"text\" type=\"fab\" color=\"secondary\"><i class=\"material-icons mx-auto\">menu_book</i></bit-button>\n  <bit-button sty=\"raised\" type=\"fab\" color=\"secondary\"><i class=\"material-icons mx-auto\">menu_book</i>\n  </bit-button>\n  <bit-button sty=\"outlined\" type=\"fab\" color=\"secondary\"><i class=\"material-icons mx-auto\">menu_book</i>\n  </bit-button>`\n\n\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SliderComponent>",
                "defaultValue": "(args: SliderComponent) => ({\n  component: SliderComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/search/search.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SearchComponent>",
                "defaultValue": "(args: SearchComponent) => ({\n  component: SearchComponent,\n  props: args,\n  // decorators: [\n  //   moduleMetadata({\n  //     declarations: [],\n  //     imports: [\n  //       SearchModule\n  //     ],\n  //   }),\n  // ],\n\n  template: `<bit-search></bit-search>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SelectComponent>",
                "defaultValue": "(args: SelectComponent) => ({\n  component: SelectComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MenuComponent>",
                "defaultValue": "(args: MenuComponent) => ({\n  component: MenuComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/toolbar/toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ToolbarComponent>",
                "defaultValue": "(args: ToolbarComponent) => ({\n  component: ToolbarComponent,\n  props: args,\n})"
            },
            {
                "name": "TYPE_DEFAULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonType.button"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "SizeEnum",
                "childs": [
                    {
                        "name": "SMALL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "NORMAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "normal"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/bitlogic/src/lib/components/status/status.component.ts"
            },
            {
                "name": "StatusEnum",
                "childs": [
                    {
                        "name": "PENEDING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pending"
                    },
                    {
                        "name": "ACCEPTED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "accepted"
                    },
                    {
                        "name": "ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "CANCELED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "canceled"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/bitlogic/src/lib/components/status/status.component.ts"
            }
        ],
        "groupedVariables": {
            "projects/bitlogic/src/lib/components/button/button.component.ts": [
                {
                    "name": "ButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  \"basic\": \"main\",\n  \"primary\": \"primary\",\n  \"secondary\": \"secondary\",\n  \"success\": \"success\",\n  \"warning\": \"warning\",\n  \"danger\": \"danger\",\n  \"high\": \"high\",\n  \"info\": \"info\"\n}"
                },
                {
                    "name": "ButtonStyle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  \"text\": \"btn-text\",\n  \"outlined\": \"btn-outline\",\n  \"raised\": \"btn\",\n  \"flat\": \"flat\"\n}"
                },
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  \"button\": \"btn\",\n  \"fab\": \"fab\",\n  \"link\": \"link\"\n}"
                },
                {
                    "name": "COLOR_DEFAULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonColor.basic"
                },
                {
                    "name": "STYLE_DEFAULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStyle.raised"
                },
                {
                    "name": "TYPE_DEFAULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonType.button"
                }
            ],
            "projects/bitlogic/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/bitlogic/src/lib/components/button/button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n\n  template: \n//   `<button mat-raised-button color=\"primary\" >\n//   hola\n// </button>`\n\n  `<bit-button sty=\"text\" color=\"secondary\">Text - secondary</bit-button>\n  <bit-button sty=\"raised\" color=\"secondary\">raised - secondary</bit-button>\n  <bit-button sty=\"outlined\" color=\"secondary\">outlined - secondary</bit-button>\n  <bit-button sty=\"text\" type=\"fab\" color=\"secondary\"><i class=\"material-icons mx-auto\">menu_book</i></bit-button>\n  <bit-button sty=\"raised\" type=\"fab\" color=\"secondary\"><i class=\"material-icons mx-auto\">menu_book</i>\n  </bit-button>\n  <bit-button sty=\"outlined\" type=\"fab\" color=\"secondary\"><i class=\"material-icons mx-auto\">menu_book</i>\n  </bit-button>`\n\n\n})"
                }
            ],
            "projects/bitlogic/src/lib/components/slider/slider.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LegajoDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LegajoSlider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Simple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "slideInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SliderInfo[]",
                    "defaultValue": "[\n  {\n    careerLevel: 'GRADO',\n    modality: 'DISTANCIA - EDUCACION DISTRIBUIDA',\n    assigment: 'VCIN02466',\n    careerName: 'LICENCIATURA EN COMERCIO INTERNACIONAL',\n    subjectsApprove: '35/37',\n    credits: '3/12',\n    subjectsLabel:'Materias programáticas aprobadas para el plan de estudio',\n    creditsLabel:'Créditos acumulados'\n\n  },\n  {\n    careerLevel: 'GRADO 1',\n    modality: 'DISTANCIA - EDUCACION DISTRIBUIDA',\n    assigment: 'VCIN03000',\n    careerName: 'Licenciatura en Gestión Turística',\n    subjectsApprove: '1/10',\n    credits: '3/3',\n    subjectsLabel:'Materias programáticas aprobadas para el plan de estudio',\n    creditsLabel:'Créditos acumulados'\n  },\n  {\n    careerLevel: 'GRADO 2',\n    modality: 'DISTANCIA - EDUCACION DISTRIBUIDA',\n    assigment: 'VCIN04000',\n    careerName: 'Mat 3',\n    subjectsApprove: '1/10',\n    credits: '3/3',\n    subjectsLabel:'Materias programáticas aprobadas para el plan de estudio',\n    creditsLabel:'Créditos acumulados'\n  },\n  {\n    careerLevel: 'GRADO 3',\n    modality: 'DISTANCIA - EDUCACION DISTRIBUIDA',\n    assigment: 'VCIN04000',\n    careerName: 'Mat 3',\n    subjectsApprove: '1/10',\n    credits: '3/3',\n    subjectsLabel:'Materias programáticas aprobadas para el plan de estudio',\n    creditsLabel:'Créditos acumulados'\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SliderComponent>",
                    "defaultValue": "(args: SliderComponent) => ({\n  component: SliderComponent,\n  props: args,\n})"
                }
            ],
            "projects/bitlogic/src/lib/components/search/search.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/search/search.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/search/search.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SearchComponent>",
                    "defaultValue": "(args: SearchComponent) => ({\n  component: SearchComponent,\n  props: args,\n  // decorators: [\n  //   moduleMetadata({\n  //     declarations: [],\n  //     imports: [\n  //       SearchModule\n  //     ],\n  //   }),\n  // ],\n\n  template: `<bit-search></bit-search>`,\n})"
                }
            ],
            "projects/bitlogic/src/lib/components/select/select.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SelectComponent>",
                    "defaultValue": "(args: SelectComponent) => ({\n  component: SelectComponent,\n  props: args,\n})"
                }
            ],
            "projects/bitlogic/src/lib/components/menu/menu.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "moreOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ id: '_mas', name: 'Más', icon: 'more_vert', link:\"\" }"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuOption[]",
                    "defaultValue": "[\n  { id: 'butt-1', name: 'Exámenes', icon: 'insert_drive_file', link:\"\" },\n  { id: 'butt-2', name: 'Materias', icon: 'menu_book', link:\"\" },\n  { id: 'butt-3', name: 'Pagos', icon: 'receipt', link:\"\" },\n  { id: 'butt-4', name: 'Titulos', icon: 'done', link:\"\"  },\n  { id: 'butt-5', name: 'info', icon: 'info', link:\"\" },\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MenuComponent>",
                    "defaultValue": "(args: MenuComponent) => ({\n  component: MenuComponent,\n  props: args,\n})"
                }
            ],
            "projects/bitlogic/src/lib/components/toolbar/toolbar.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/toolbar/toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/bitlogic/src/lib/components/toolbar/toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ToolbarComponent>",
                    "defaultValue": "(args: ToolbarComponent) => ({\n  component: ToolbarComponent,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/bitlogic/src/lib/components/status/status.component.ts": [
                {
                    "name": "SizeEnum",
                    "childs": [
                        {
                            "name": "SMALL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "NORMAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "normal"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/bitlogic/src/lib/components/status/status.component.ts"
                },
                {
                    "name": "StatusEnum",
                    "childs": [
                        {
                            "name": "PENEDING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pending"
                        },
                        {
                            "name": "ACCEPTED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "accepted"
                        },
                        {
                            "name": "ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "CANCELED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "canceled"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/bitlogic/src/lib/components/status/status.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLOR_DEFAULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STYLE_DEFAULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TYPE_DEFAULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/chips/chips.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 81,
                "coverageCount": "9/11",
                "status": "very-good"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/menu/menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuOption",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moreOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/search/search.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AutoCompleteOption",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/search/search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/search/search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/select/select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OtherText",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/select/select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectButtons",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/select/select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SliderComponent",
                "coveragePercent": 27,
                "coverageCount": "3/11",
                "status": "medium"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/slider/slider.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SliderInfo",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LegajoDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LegajoSlider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Simple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slideInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/slider/slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/status/status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 5,
                "coverageCount": "1/19",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/table/table.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableHeader",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/toolbar/toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/lib/components/toolbar/toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/bitlogic/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}